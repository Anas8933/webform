const webFormService = require('../services/webFormService');

// Controller for creating a new web form
exports.createWebForm = async (req, res) => {
  const { actionType ,formDes, title, fields, button ,showThankYou, redirectUrl ,status } = req.body;
   
  try {
    const newWebForm = await webFormService.createWebForm({actionType, status, formDes, title, fields, button ,showThankYou, redirectUrl });
    res.json({ message: 'WebForm created successfully', WebForm: newWebForm });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// Controller to update the web form by token (PUT request)
exports.updateWebForm = async (req, res) => {
  const { templateId } = req.params;
  const { formDes, title, fields, button ,actionType,status,showThankYou, redirectUrl   } = req.body;

  try {
    const updatedWebForm = await webFormService.updateWebForm(templateId, { formDes, title, fields, button , actionType,status,showThankYou, redirectUrl });
    res.json({ message: 'WebForm updated successfully', WebForm: updatedWebForm });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

exports.getWebForm = async (req, res) => {
  const { token } = req.params;  // Extract token from the request parameters

  try {
    const form = await webFormService.getWebForm(token);  // Pass token to service
    if (!form) {
      return res.status(404).json({ message: 'Web form not found' });  // Handle case where no form is found
    }
    res.status(200).json(form);
  } catch (error) {
    res.status(500).json({
      message: 'Error retrieving web form',
      error: error.message
    });
  }
};


// Controller to get all forms
exports.getAllForms = async (req, res) => {
  try {
    const forms = await webFormService.getAllForms();
    res.status(200).json(forms);
  } catch (error) {
    res.status(500).json({ message: 'Error retrieving form data', error });
  }
};

// Controller to get forms by templateId
exports.getFormsByTemplateId = async (req, res) => {
  const { templateId } = req.params;

  try {
    const forms = await webFormService.getFormsByTemplateId(templateId);
    res.json(forms);
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// Controller to delete a form by templateId
exports.deleteFormById = async (req, res) => {
  const { templateId } = req.params;

  try {
    const nullFields = await webFormService.deleteFormById(templateId);
    res.json({ message: 'Form Deleted successfully', form: nullFields });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// Controller to log interactions with the form
exports.Interaction = async (req, res) => {
  const { token } = req.params;

  try {
    const interactedCount = await webFormService.logInteraction(token);
    res.json({ message: 'Interaction logged successfully', interacted: interactedCount });
  } catch (err) {
    console.error("Error logging interaction:", err);
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};
// Controller to generate HTML form by token
exports.getWebFormByHtml = async (req, res) => {
  const { token } = req.params;
  console.log(token);

  try {
    // Fetch the web form data using the service
    const webForm = await webFormService.fetchWebFormData(token);

    // Check if the web form exists
    if (!webForm) {
      const formNotFoundHTML = webFormService.generateFormNotFoundHTML();
      return res.send(formNotFoundHTML);
    }

    // Generate the HTML form using the service
    const formHTML = webFormService.generateFormHTML(webForm, token);
    res.send(formHTML);
  } catch (err) {
    console.error("Error in generateHTMLFormByToken:", err);
    res.status(500).send(webFormService.generateFormNotFoundHTML());
  }
};

// Controller to handle form submission
exports.submitWebFormByToken = async (req, res) => {
  const { token } = req.params;
  const formData = req.body;

  try {
      const { newLead, actionResponse } = await webFormService.submitWebFormByToken(token, formData);
      
      // Log the new lead
      console.log('New Lead:', newLead);

      // Send the appropriate response based on action type
      if (actionResponse) {
          return res.send(actionResponse); // Send HTML response generated by the service
      }

      // If there's no action response, respond with the lead information
      return res.status(201).json({ message: 'Form submitted successfully', lead: newLead });
  } catch (err) {
      return res.status(500).json({ message: 'Server error', error: err.message });
  }
};
